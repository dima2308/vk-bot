import requests
import vk_api
from emoji import emojize
from config import VK_TOKEN, WEATHERSTACK_API_KEY
from utils import format_date, get_family_status


class VkBot:

    vk = vk_api.VkApi(token=VK_TOKEN)
    api = vk.get_api()

    def __init__(self, user_id):
        self._USER_ID = user_id
        self._USERNAME = self._get_user_name_from_vk_id(user_id)
        self._COMMANDS = ["–ü–†–ò–í–ï–¢", "–ü–û–ì–û–î–ê", "–ü–û–ö–ê", "–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨"]

    def _get_user_name_from_vk_id(self, user_id):
        user = self.api.users.get(user_id=user_id)
        return user[0].get('first_name')

    def _get_user_info(self, user):
        try:
            user = self.api.users.get(user_ids=user, fields=[
                'bdate', 'relation', 'city', 'last_seen', 'domain'])
        except:
            return '–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'

        id = user[0].get('id')
        first_name = user[0].get('first_name')
        last_name = user[0].get('last_name')

        bdate = user[0].get('bdate')
        relation = user[0].get('relation')

        if relation:
            relation = get_family_status(relation)

        city = user[0].get('city').get('title')
        last_seen = format_date(user[0].get('last_seen').get('time'))
        domain = 'https://vk.com/' + user[0].get('domain')

        return f'''{first_name} {last_name}\n Id: {id}\n–°—Ç—Ä–∞–Ω–∏—Ü–∞: {domain}
            –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {bdate}\n –°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: {relation}
            –ì–æ—Ä–æ–¥: {city}\n –ë—ã–ª(–∞) –≤ —Å–µ—Ç–∏: {last_seen}'''

    def _get_weather(self, city: str = "–ú–æ—Å–∫–≤–∞") -> str:
        params = {'access_key': WEATHERSTACK_API_KEY, 'query': city}
        api_result = requests.get(
            'http://api.weatherstack.com/current', params)
        api_response = api_result.json()

        if api_response.get('request'):
            temp = api_response['current']['temperature']
            feelslike = api_response['current']['feelslike']
            country = api_response['location']['country']
            res = f'–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city.capitalize()} ({country}): {temp}¬∞\n–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feelslike}¬∞'
        else:
            res = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ –≤ –¥–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π.'

        return res

    @staticmethod
    def _clean_all_tag_from_str(string_line):
        result = ""
        not_skip = True
        for i in list(string_line):
            if not_skip:
                if i == "<":
                    not_skip = False
                else:
                    result += i
            else:
                if i == ">":
                    not_skip = True

        return result

    def new_message(self, message):
        # –ü—Ä–∏–≤–µ—Ç
        if message.upper() == self._COMMANDS[0]:
            SMILE = 'üëã'
            return f'–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç, {self._USERNAME}! {emojize(SMILE)}'

        # –ü–æ–≥–æ–¥–∞
        elif message.upper().split(' ')[0] == self._COMMANDS[1]:
            try:
                city = message.split(' ')[1]
                return self._get_weather(city)
            except:
                return '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≥–æ—Ä–æ–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n (–ø—Ä–∏–º. –ü–æ–≥–æ–¥–∞ –ú–æ—Å–∫–≤–∞)'

        # –ü–æ–∫–∞
        elif message.upper() == self._COMMANDS[2]:
            return f'–ü–æ–∫–∞-–ø–æ–∫–∞, {self._USERNAME}!'

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        elif message.split(' ')[0].upper() == self._COMMANDS[3]:
            try:
                user = message.split(' ')[1]
                return self._get_user_info(user)
            except:
                return '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ id/nickname –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n (–ø—Ä–∏–º. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 123)'

        else:
            SMILE = 'ü§î'
            return f'''–ù–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è {emojize(SMILE)}
            –ó–Ω–∞—é –∫–æ–º–∞–Ω–¥—ã "–ü—Ä–∏–≤–µ—Ç", "–ü–æ–∫–∞", "–ü–æ–≥–æ–¥–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.'''
